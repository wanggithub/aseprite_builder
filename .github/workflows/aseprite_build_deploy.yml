name: Build and deploy Aseprite

on:
  workflow_dispatch:
  schedule:
    - cron: '30 * * * *'
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release
  
jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')
        
        echo "${LATEST_TAG}" > ${LATEST_TAG}.txt
        echo "::set-output name=latest_tag::${LATEST_TAG}"
        echo "::set-output name=download_url::${DOWNLOAD_URL}"
        echo "::set-output name=version_info::${VERSION_INFO}"
    - name: Load version from cache
      id: version_check
      uses: actions/cache@v2
      with:
        path: ${{ steps.version_info.outputs.latest_tag }}.txt
        key: cached_version
    - name: Should we start new build?
      id: should_build
      if: steps.version_check.outputs.cache-hit != 'true'
      run: echo "::set-output name=should_build::true"
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false
  
  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest, macOS-latest]
         build_type: [RelWithDebInfo, Debug]
         enable_ui: [off]
       fail-fast: false    
    steps:
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        with:
          key: ${{ matrix.os }}-${{ matrix.enable_ui }}-${{ matrix.build_type }}
      - name: Download Aseprite release
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build
          - uses: turtlesec-no/get-ninja@main
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
      - name: Workaround for windows-2022 and cmake 3.25.0
        if: runner.os == 'Windows'
        shell: bash
        run: rm -rf C:/Strawberry/
      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]] ; then
            sudo apt-get update -qq
            sudo apt-get install -y \
              libx11-dev libxcursor-dev libxi-dev
          fi
      - name: Run CMake
        shell: bash
        working-directory: aseprite
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            export enable_ccache=off
          else
            export enable_ccache=on
          fi
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=ON \
            -DENABLE_UI=${{ matrix.enable_ui }} \
            -DENABLE_CCACHE=$enable_ccache
      - name: Compiling|Run Ninja
        working-directory: aseprite/build
        shell: bash
        run: |
          cd build && ninja
      - name: Running C++ Tests
      shell: bash
      working-directory: aseprite
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure    
      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest
      - name: (Windows) Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      - name: Create release
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *
      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_content_type: application/zip
